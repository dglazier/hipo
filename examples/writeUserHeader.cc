//***********************************************************************
//***********************************************************************
//  HIPO 4.0
//=======================================================================
// Autogenerated code by HIPO 4.0 io library
// Modify the main loop to suite your needs
// Date: 07/17/2018
// Author: G.Gavalian
//***********************************************************************
#include <cstdlib>
#include <iostream>
#include "writer.h"

void createEvent(hipo::event ev);

int main(int argc, char** argv) {

   std::cout << " writing file example : write user headers ::: "  << __cplusplus << std::endl;

   char outputFile[256];
   snprintf(outputFile,256,"%s","userHeaderFile.hipo");

   // define one bank schema
   hipo::schema  sch("rec::event",30,1);
   sch.parse("pid/S,px/F,py/F,pz/F,vx/F,vy/F,vz/F");
   sch.show();

   hipo::bank rec(sch,30);
   hipo::event outEvent;

   outEvent.addStructure(rec);

   // add bank schema to the writer's schema factory
   hipo::writer  writer;
   writer.getDictionary().addSchema(sch);

   writer.addUserConfig("gemc","{\"version\": \"4.4.2\", \"beam\": \"e-,10.6 GeV\"}");
   writer.addUserConfig("clara","{\"version\": \"8.0.2\", \"service\": \"dctracking\"}");
   
   writer.open(outputFile);
   writer.addEvent(outEvent);
   writer.close();
   writer.showSummary();


   // and now, let's read the file and see if we can recover the user
   // heder strings

   printf("\n\n NOW reading the file back : %s\n\n",outputFile);
   hipo::reader reader;
   reader.open(outputFile);

   std::map<std::string,std::string> config;

   reader.readUserConfig(config);

   //-- one can get it if one knows the existing key
   //-------------------------------------------------------
   //if(config.count(std::string(("gemc"))!=0){
   //  std::string json = config[std::string("gemc")];
   //}
   //-------------------------------------------------------

   std::map<std::string,std::string>::iterator it;
   for( it = config.begin(); it != config.end(); it++){
     printf("\t%14s : %s\n",it->first.c_str(),it->second.c_str());
   }

   printf("\n\n***************************\n\n");
}
//### END OF GENERATED CODE

void createEvent(hipo::event ev){
  hipo::schema  schemaPart("event::particle",100,1);
}
